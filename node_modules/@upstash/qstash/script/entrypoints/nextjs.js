"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifySignature = void 0;
const dntShim = __importStar(require("../_dnt.shims.js"));
const receiver_js_1 = require("../pkg/receiver.js");
function verifySignature(handler, config) {
    const currentSigningKey = config?.currentSigningKey ??
        // @ts-ignore Deno can't compile
        process.env["QSTASH_CURRENT_SIGNING_KEY"];
    if (!currentSigningKey) {
        throw new Error("currentSigningKey is required, either in the config or as env variable QSTASH_CURRENT_SIGNING_KEY");
    }
    const nextSigningKey = config?.nextSigningKey ??
        // @ts-ignore Deno can't compile
        process.env["QSTASH_NEXT_SIGNING_KEY"];
    if (!nextSigningKey) {
        throw new Error("nextSigningKey is required, either in the config or as env variable QSTASH_NEXT_SIGNING_KEY");
    }
    const receiver = new receiver_js_1.Receiver({
        currentSigningKey,
        nextSigningKey,
        subtleCrypto: dntShim.crypto.subtle,
    });
    return async (req, res) => {
        const signature = req.headers["upstash-signature"];
        if (!signature) {
            throw new Error("`Upstash-Signature` header is missing");
        }
        if (typeof signature !== "string") {
            throw new Error("`Upstash-Signature` header is not a string");
        }
        const chunks = [];
        for await (const chunk of req) {
            chunks.push(typeof chunk === "string" ? Buffer.from(chunk) : chunk);
        }
        const body = Buffer.concat(chunks).toString("utf-8");
        // const url = config?.url ?? new URL(
        //   req.url!,
        //   `https://${process.env.VERCEL_URL}`,
        // ).href;
        const isValid = await receiver.verify({ signature, body });
        if (!isValid) {
            res.status(400);
            res.send("Invalid signature");
            return res.end();
        }
        try {
            if (req.headers["content-type"] === "application/json") {
                req.body = JSON.parse(body);
            }
            else {
                req.body = body;
            }
        }
        catch {
            req.body = body;
        }
        return handler(req, res);
    };
}
exports.verifySignature = verifySignature;

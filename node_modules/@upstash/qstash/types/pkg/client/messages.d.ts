import { Requester } from "./http.js";
import type { Log, Task } from "./types.js";
export declare type GetMessageRequest = {
    id: string;
};
export declare type CancelMessageRequest = {
    id: string;
};
export declare type Message = {
    messageId: string;
    header: Record<string, string[]>;
    body: string;
} & ({
    url: string;
    topicd?: never;
} | {
    url?: never;
    topicId: string;
});
export declare type ListMessagesRequest = {
    cursor?: number;
};
export declare type ListMessagesResponse = {
    cursor?: number;
    messages: Message[];
};
export declare type ListLogsRequest = {
    id: string;
    cursor?: number;
};
export declare type ListLogsResponse = {
    cursor?: number;
    logs: Log[];
};
export declare type ListTasksRequest = {
    id: string;
    cursor?: number;
};
export declare type ListTasksResponse = {
    cursor?: number;
    logs: Task[];
};
export declare class Messages {
    private readonly http;
    constructor(http: Requester);
    /**
     * Get a message
     */
    get(req: GetMessageRequest): Promise<Message>;
    /**
     * List your messages
     */
    list(req?: ListMessagesRequest): Promise<ListMessagesResponse>;
    /**
     * List logs from a message
     */
    logs(req: ListLogsRequest): Promise<ListLogsResponse>;
    /**
     * List tasks for a message
     */
    tasks(req: ListTasksRequest): Promise<ListTasksResponse>;
    /**
     * Cancel a topic by name or id.
     */
    delete(req: CancelMessageRequest): Promise<void>;
}

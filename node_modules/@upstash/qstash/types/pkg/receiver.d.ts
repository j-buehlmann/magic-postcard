import { crypto } from "../deps/deno.land/std@0.161.0/crypto/mod.js";
export declare type SubtleCrypto = typeof crypto.subtle;
/**
 * Necessary to verify the signature of a request.
 */
export declare type ReceiverConfig = {
    /**
     * The current signing key. Get it from `https://console.upstash.com/qstash
     */
    currentSigningKey: string;
    /**
     * The next signing key. Get it from `https://console.upstash.com/qstash
     */
    nextSigningKey: string;
    subtleCrypto: SubtleCrypto;
};
export declare type VerifyRequest = {
    /**
     * The signature from the `upstash-signature` header.
     */
    signature: string;
    /**
     * The raw request body.
     */
    body: string | Uint8Array;
    /**
     * URL of the endpoint where the request was sent to.
     *
     * Omit empty to disable checking the url.
     */
    url?: string;
};
export declare class SignatureError extends Error {
    constructor(message: string);
}
/**
 * Receiver offers a simlpe way to verify the signature of a request.
 */
export declare class Receiver {
    private readonly currentSigningKey;
    private readonly nextSigningKey;
    private readonly subtleCrypto;
    constructor(config: ReceiverConfig);
    /**
     * Verify the signature of a request.
     *
     * Tries to verify the signature with the current signing key.
     * If that fails, maybe because you have rotated the keys recently, it will
     * try to verify the signature with the next signing key.
     *
     * If that fails, the signature is invalid and a `SignatureError` is thrown.
     */
    verify(req: VerifyRequest): Promise<boolean>;
    /**
     * Verify signature with a specific signing key
     */
    private verifyWithKey;
}
